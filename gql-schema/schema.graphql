schema {
  query: TwitterAPI
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Retweet of a tweet
type Retweet {
  id: ID
  created_at: String
  in_reply_to_tweet_id: String
  in_reply_to_user_id: Int
  in_reply_to_screen_name: String
  retweeted_status: Tweet
  user: TwitterUser
}

# A tweet object
type Tweet {
  id: ID
  created_at: String
  text: String
  retweet_count: Int
  user: TwitterUser

  # Get a list of retweets
  retweets(limit: Int = 5): [Retweet]
}

# A connection to a list of items.
type TweetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TweetEdge]
}

# An edge in a connection.
type TweetEdge {
  # The item at the end of the edge
  node: Tweet

  # A cursor for use in pagination
  cursor: String!
}

# The Twitter API
type TwitterAPI {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  tweet(
    # Unique ID of tweet
    id: String!
  ): Tweet

  # Returns a collection of relevant Tweets matching a specified query.
  search: Viewer
}

# Twitter user
type TwitterUser {
  created_at: String
  description: String
  id: ID
  screen_name: String
  name: String
  profile_image_url: String
  url: String

  # Get location of user
  location: String
  tweets_count: Int

  # Get location of user
  weather: String
  followers_count: Int

  # Get a list of tweets for current user
  tweets(limit: Int = 10): [Tweet]
}

type Viewer implements Node {
  # The ID of an object
  id: ID!

  # Returns a list of tweets matching the query, to be specified as an argument
  tweetConnection(
    after: String
    first: Int
    before: String
    last: Int

    # A UTF-8, URL-encoded search query of 500 characters maximum, including
    # operators. Queries may additionally be limited by complexity.
    q: String

    # The number of tweets to return per page, up to a maximum of 100. This was
    # formerly the “rpp” parameter in the old Search API.
    count: Int
  ): TweetConnection
}
